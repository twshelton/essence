defmodule Indy do
    use Rustler, otp_app: :essence, crate: "essence"

    #Pool definitions
    def delete_pool_ledger_config(config_name), do: nif_error() 
    def open_pool_ledger(config_name, config), do: nif_error() 
    def refresh_pool_ledger(handle), do: nif_error() 
    def close_pool_ledger(handle), do: nif_error() 
    def open_default_pool_ledger(config_name), do: nif_error() 
    def create_pool_ledger_config(config_name, config), do: nif_error() 
    def set_protocol_version(version), do: nif_error() 
    def list_pools(), do: nif_error() 

    #Wallet definitions
    def create_wallet(config, credentials), do: nif_error() 
    def import_wallet(config, credentials, import_config), do: nif_error() 
    def export_wallet(handle, export_config), do: nif_error() 
    def delete_wallet(config, credentials), do: nif_error() 
    def close_wallet(handle), do: nif_error() 
    def open_wallet(config, credentials), do: nif_error()

    #Did definitions
    def create_and_store_my_did(wallet_handle, did_json), do: nif_error() 
    def replace_keys_start(wallet_handle, did, key_info), do: nif_error() 
    def replace_keys_apply(wallet_handle, did), do: nif_error() 
    def store_their_did(wallet_handle, identity_json), do: nif_error()
    def key_for_did(pool_handle, wallet_handle, did), do: nif_error()
    def key_for_local_did(wallet_handle, did), do: nif_error()
    def set_endpoint_for_did(wallet_handle, did, address, transport_key), do: nif_error()
    def get_endpoint_for_did(wallet_handle, pool_handle, did), do: nif_error()
    def set_did_metadata(wallet_handle, did, metdata), do: nif_error() 
    def get_did_metadata(wallet_handle, did), do: nif_error() 
    def get_my_did_with_meta(wallet_handle, did), do: nif_error() 
    def list_my_dids_with_meta(wallet_handle), do: nif_error() 
    def abbreviate_verkey(handle), do: nif_error() 

    #Ledger definitions
    def sign_and_submit_request(pool_handle,wallet_handle,submitter_did,request_json), do: nif_error()
    def submit_request(pool_handle,request_json), do: nif_error()
    def submit_action(pool_handle,request_json,nodes,timeout), do: nif_error()
    def sign_request(wallet_handle,submitter_did,request_json), do: nif_error()
    def multi_sign_request(wallet_handle,submitter_did,request_json), do: nif_error()
    def build_get_ddo_request(submitter_did,target_did), do: nif_error()
    def build_nym_request(submitter_did,target_did,verkey,alias,role), do: nif_error()
    def build_get_nym_request(submitter_did,target_did), do: nif_error()
    def build_attrib_request(submitter_did,target_did,hash,raw,enc), do: nif_error()
    def build_get_attrib_request(submitter_did,target_did,raw,hash,enc), do: nif_error()
    def build_schema_request(submitter_did,data), do: nif_error()
    def build_get_schema_request(submitter_did,id), do: nif_error()
    def parse_get_schema_response(get_schema_response), do: nif_error()
    def build_cred_def_request(submitter_did,data), do: nif_error()
    def build_get_cred_def_request(submitter_did,id), do: nif_error()
    def parse_get_cred_def_response(get_cred_def_response), do: nif_error()
    def build_node_request(submitter_did,target_did,data), do: nif_error()
    def build_get_validator_info_request(submitter_did), do: nif_error()
    def build_get_txn_request(submitter_did,ledger_type,seq_no), do: nif_error()
    def build_pool_config_request(submitter_did,writes,force), do: nif_error()
    def build_pool_restart_request(submitter_did,action,datetime), do: nif_error()
    def build_pool_upgrade_request(submitter_did,name,version,action,sha256,timeout,schedule,justification,reinstall,force,package), do: nif_error()
    def build_revoc_reg_def_request(submitter_did,data), do: nif_error()
    def build_get_revoc_reg_def_request(submitter_did,id), do: nif_error()
    def parse_get_revoc_reg_def_response(get_revoc_reg_def_response), do: nif_error()
    def build_revoc_reg_entry_request(submitter_did,revoc_reg_def_id,rev_def_type,value), do: nif_error()
    def build_get_revoc_reg_request(submitter_did,revoc_reg_def_id,timestamp), do: nif_error()
    def parse_get_revoc_reg_response(get_revoc_reg_response), do: nif_error()
    def build_get_revoc_reg_delta_request(submitter_did,revoc_reg_def_id,from,to), do: nif_error()
    def parse_get_revoc_reg_delta_response(get_revoc_reg_delta_response), do: nif_error()

    def nif_error, do: :erlang.nif_error(:nif_not_loaded)
end
