defmodule Indy do
    use Rustler, otp_app: :essence, crate: "essence"

    #Pool definitions
    def delete_pool_ledger_config(_config_name), do: nif_error() 
    def open_pool_ledger(_config_name, _config), do: nif_error() 
    def refresh_pool_ledger(_handle), do: nif_error() 
    def close_pool_ledger(_handle), do: nif_error() 
    def open_default_pool_ledger(_config_name), do: nif_error() 
    def create_pool_ledger_config(_config_name, _config), do: nif_error() 
    def set_protocol_version(_version), do: nif_error() 
    def list_pools(), do: nif_error() 

    #Wallet definitions
    def create_wallet(_config, _credentials), do: nif_error() 
    def import_wallet(_config, _credentials, _import_config), do: nif_error() 
    def export_wallet(_handle, _export_config), do: nif_error() 
    def delete_wallet(_config, _credentials), do: nif_error() 
    def close_wallet(_handle), do: nif_error() 
    def open_wallet(_config, _credentials), do: nif_error()

    #Did definitions
    def create_and_store_my_did(_wallet_handle, _did_json), do: nif_error() 
    def replace_keys_start(_wallet_handle, _did, _key_info), do: nif_error() 
    def replace_keys_apply(_wallet_handle, _did), do: nif_error() 
    def store_their_did(_wallet_handle, _identity_json), do: nif_error()
    def key_for_did(_pool_handle, _wallet_handle, _did), do: nif_error()
    def key_for_local_did(_wallet_handle, _did), do: nif_error()
    def set_endpoint_for_did(_wallet_handle, _did, _address, _transport_key), do: nif_error()
    def get_endpoint_for_did(_wallet_handle, _pool_handle, _did), do: nif_error()
    def set_did_metadata(_wallet_handle, _did, _metdata), do: nif_error() 
    def get_did_metadata(_wallet_handle, _did), do: nif_error() 
    def get_my_did_with_meta(_wallet_handle, _did), do: nif_error() 
    def list_my_dids_with_meta(_wallet_handle), do: nif_error() 
    def abbreviate_verkey(_handle), do: nif_error() 

    #Ledger definitions
    def sign_and_submit_request(_pool_handle,_wallet_handle,_submitter_did,_request_json), do: nif_error()
    def submit_request(_pool_handle,_request_json), do: nif_error()
    def submit_action(_pool_handle,_request_json,_nodes,_timeout), do: nif_error()
    def sign_request(_wallet_handle,_submitter_did,_request_json), do: nif_error()
    def multi_sign_request(_wallet_handle,_submitter_did,_request_json), do: nif_error()
    def build_get_ddo_request(_submitter_did,_target_did), do: nif_error()
    def build_nym_request(_submitter_did,_target_did,_verkey,_alias,_role), do: nif_error()
    def build_get_nym_request(_submitter_did,_target_did), do: nif_error()
    def build_attrib_request(_submitter_did,_target_did,_hash,_raw,_enc), do: nif_error()
    def build_get_attrib_request(_submitter_did,_target_did,_raw,_hash,_enc), do: nif_error()
    def build_schema_request(_submitter_did,_data), do: nif_error()
    def build_get_schema_request(_submitter_did,_id), do: nif_error()
    def parse_get_schema_response(_get_schema_response), do: nif_error()
    def build_cred_def_request(_submitter_did,_data), do: nif_error()
    def build_get_cred_def_request(_submitter_did,_id), do: nif_error()
    def parse_get_cred_def_response(_get_cred_def_response), do: nif_error()
    def build_node_request(_submitter_did,_target_did,_data), do: nif_error()
    def build_get_validator_info_request(_submitter_did), do: nif_error()
    def build_get_txn_request(_submitter_did,_ledger_type,_seq_no), do: nif_error()
    def build_pool_config_request(_submitter_did,_writes,_force), do: nif_error()
    def build_pool_restart_request(_submitter_did,_action,_datetime), do: nif_error()
    def build_pool_upgrade_request(_submitter_did,_name,_version,_action,_sha256,_timeout,_schedule,_justification,_reinstall,_force,_package), do: nif_error()
    def build_revoc_reg_def_request(_submitter_did,_data), do: nif_error()
    def build_get_revoc_reg_def_request(_submitter_did,_id), do: nif_error()
    def parse_get_revoc_reg_def_response(_get_revoc_reg_def_response), do: nif_error()
    def build_revoc_reg_entry_request(_submitter_did,_revoc_reg_def_id,_rev_def_type,_value), do: nif_error()
    def build_get_revoc_reg_request(_submitter_did,_revoc_reg_def_id,_timestamp), do: nif_error()
    def parse_get_revoc_reg_response(_get_revoc_reg_response), do: nif_error()
    def build_get_revoc_reg_delta_request(_submitter_did,_revoc_reg_def_id,_from,_to), do: nif_error()
    def parse_get_revoc_reg_delta_response(_get_revoc_reg_delta_response), do: nif_error()

    #Pairwise definitions
    def is_pairwise_exists(_wallet_handle,_their_did), do: nif_error()
    def create_pairwise(_wallet_handle,_their_did,_my_did,_metadata), do: nif_error()
    def list_pairwise(_wallet_handle), do: nif_error()
    def get_pairwise(_wallet_handle,_their_did), do: nif_error()
    def set_pairwise_metadata(_wallet_handle,_their_did,_metadata), do: nif_error()

    #Payments definitions
    def register_payment_method(_payment_method,_create_payment_address,_add_request_fees,_parse_response_with_fees,_build_get_payment_sources_request,_parse_get_payment_sources_response,_build_payment_req,_parse_payment_response,_build_mint_req,_build_set_txn_fees_req,_build_get_txn_fees_req,_parse_get_txn_fees_response,_build_verify_payment_req,_parse_verify_payment_response), do: nif_error()
    def create_payment_address(_wallet_handle,_payment_method,_config), do: nif_error()
    def list_payment_addresses(_wallet_handle), do: nif_error()
    def add_request_fees(_wallet_handle,_submitter_did,_req_json,_inputs_json,_outputs_json,_extra), do: nif_error()
    def parse_response_with_fees(_payment_method,_resp_json), do: nif_error()
    def build_get_payment_sources_request(_wallet_handle,_submitter_did,_payment_address), do: nif_error()
    def parse_get_payment_sources_response(_payment_method,_resp_json), do: nif_error()
    def build_payment_req(_wallet_handle,_submitter_did,_inputs_json,_outputs_json,_extra), do: nif_error()
    def parse_payment_response(_payment_method,_resp_json), do: nif_error()
    def build_mint_req(_wallet_handle,_submitter_did,_outputs_json,_extra), do: nif_error()
    def build_set_txn_fees_req(_wallet_handle,_submitter_did,_payment_method,_fees_json), do: nif_error()
    def build_get_txn_fees_req(_wallet_handle,_submitter_did,_payment_method), do: nif_error()
    def parse_get_txn_fees_response(_payment_method,_resp_json), do: nif_error()
    def build_verify_payment_req(_wallet_handle,_submitter_did,_receipt), do: nif_error()
    def parse_verify_payment_response(_payment_method,_resp_json), do: nif_error()
  
    #NonSecrets definitions
    def add_wallet_record(_wallet_handle,_type_,_id,_value,_tags_json), do: nif_error()
    def update_wallet_record_value(_wallet_handle,_type_,_id,_value), do: nif_error()
    def update_wallet_record_tags(_wallet_handle,_type_,_id,_tags_json), do: nif_error()
    def add_wallet_record_tags(_wallet_handle,_type_,_id,_tags_json), do: nif_error()
    def delete_wallet_record_tags(_wallet_handle,_type_,_id,_tag_names_json), do: nif_error()
    def delete_wallet_record(_wallet_handle,_type_,_id), do: nif_error()
    def get_wallet_record(_wallet_handle,_type_,_id,_options_json), do: nif_error()
    def open_wallet_search(_wallet_handle,_type_,_query_json,_options_json), do: nif_error()
    def fetch_wallet_search_next_records(_wallet_handle,_wallet_search_handle,_count), do: nif_error()
    def close_wallet_search(_wallet_search_handle), do: nif_error()

    #Anoncreds definitions
    def issuer_create_schema(_issuer_did,_name,_version,_attrs), do: nif_error()
    def issuer_create_and_store_credential_def(_wallet_handle,_issuer_did,_schema_json,_tag,_signature_type,_config_json), do: nif_error()
    def issuer_create_and_store_revoc_reg(_wallet_handle,_issuer_did,_revoc_def_type,_tag,_cred_def_id,_config_json,_tails_writer_handle), do: nif_error()
    def issuer_create_credential_offer(_wallet_handle,_cred_def_id), do: nif_error()
    def issuer_create_credential(_wallet_handle,_cred_offer_json,_cred_req_json,_cred_values_json,_rev_reg_id,_blob_storage_reader_handle), do: nif_error()
    def issuer_revoke_credential(_wallet_handle,_blob_storage_reader_cfg_handle,_rev_reg_id,_cred_revoc_id), do: nif_error()
    def issuer_merge_revocation_registry_deltas(_rev_reg_delta_json,_other_rev_reg_delta_json), do: nif_error()
    def prover_create_master_secret(_wallet_handle,_master_secret_id), do: nif_error()
    def prover_create_credential_req(_wallet_handle,_prover_did,_cred_offer_json,_cred_def_json,_master_secret_id), do: nif_error()
    def prover_store_credential(_wallet_handle,_cred_id,_cred_req_metadata_json,_cred_json,_cred_def_json,_rev_reg_def_json), do: nif_error()
    def prover_get_credential(_wallet_handle,_cred_id), do: nif_error()
    def prover_search_credentials(_wallet_handle,_query_json), do: nif_error()
    def prover_fetch_credentials(_search_handle,_count), do: nif_error()
    def prover_close_credentials_search(_search_handle), do: nif_error()
    def prover_search_credentials_for_proof_req(_wallet_handle,_proof_request_json,_extra_query_json), do: nif_error()
    def prover_fetch_credentials_for_proof_req(_search_handle,_item_referent,_count), do: nif_error()
    def prover_close_credentials_search_for_proof_req(_search_handle), do: nif_error()
    def prover_create_proof(_wallet_handle,_proof_req_json,_requested_credentials_json,_master_secret_id,_schemas_json,_credential_defs_json,_rev_states_json), do: nif_error()
    def verifier_verify_proof(_proof_request_json,_proof_json,_schemas_json,_credential_defs_json,_rev_reg_defs_json,_rev_regs_json), do: nif_error()
    def create_revocation_state(_blob_storage_reader_handle,_rev_reg_def_json,_rev_reg_delta_json,_timestamp,_cred_rev_id), do: nif_error()
    def update_revocation_state(_blob_storage_reader_handle,_rev_state_json,_rev_reg_def_json,_rev_reg_delta_json,_timestamp,_cred_rev_id), do: nif_error()

  
    #Crypto definitions
    def create_key(_wallet_handle,_key_json), do: nif_error()
    def set_key_metadata(_wallet_handle,_verkey,_metadata), do: nif_error()
    def get_key_metadata(_wallet_handle,_verkey), do: nif_error()
    def crypto_sign(_wallet_handle,_signer_vk,_message_raw,_message_len), do: nif_error()
    def crypto_verify(_signer_vk,_message_raw,_message_len,_signature_raw,_signature_len), do: nif_error()
    def crypto_auth_crypt(_wallet_handle,_sender_vk,_recipient_vk,_msg_data,_msg_len), do: nif_error()
    def crypto_auth_decrypt(_wallet_handle,_recipient_vk,_encrypted_msg,_encrypted_len), do: nif_error()
    def crypto_anon_crypt(_recipient_vk,_msg_data,_msg_len), do: nif_error()
    def crypto_anon_decrypt(_wallet_handle,_recipient_vk,_encrypted_msg,_encrypted_len), do: nif_error()
  
    def nif_error, do: :erlang.nif_error(:nif_not_loaded)
end
